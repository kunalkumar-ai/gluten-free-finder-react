import requests
import time
import json

# --- CONFIGURATION ---

# You can expand this list with up to 100 cities as you planned
CITIES_TO_PREPOPULATE = [
    "London, United Kingdom",
    "Paris, France",
    "Rome, Italy",
    "Madrid, Spain",
    "Berlin, Germany",
    "Moscow, Russia",
    "Istanbul, Turkey",
    "Amsterdam, Netherlands",
    "Barcelona, Spain",
    "Vienna, Austria",
    "Prague, Czech Republic",
    "Budapest, Hungary",
    "Warsaw, Poland",
    "Bucharest, Romania",
    "Milan, Italy",
    "Munich, Germany",
    "Hamburg, Germany",
    "Lisbon, Portugal",
    "Dublin, Ireland",
    "Athens, Greece",
    "Stockholm, Sweden",
    "Copenhagen, Denmark",
    "Helsinki, Finland",
    "Oslo, Norway",
    "Brussels, Belgium",
    "Zurich, Switzerland",
    "Geneva, Switzerland",
    "Saint Petersburg, Russia",
    "Kyiv, Ukraine",
    "Belgrade, Serbia",
    "Sofia, Bulgaria",
    "Zagreb, Croatia",
    "Florence, Italy",
    "Venice, Italy",
    "Naples, Italy",
    "Marseille, France",
    "Lyon, France",
    "Frankfurt, Germany",
    "Cologne, Germany",
    "Rotterdam, Netherlands",
    "Antwerp, Belgium",
    "Seville, Spain",
    "Valencia, Spain",
    "Krakow, Poland",
    "Riga, Latvia",
    "Vilnius, Lithuania",
    "Tallinn, Estonia",
    "Bratislava, Slovakia",
    "Ljubljana, Slovenia",
    "Reykjavik, Iceland",
    "Edinburgh, United Kingdom",
    "Manchester, United Kingdom",
    "Birmingham, United Kingdom",
    "Glasgow, United Kingdom",
    "New York, New York",
    "Los Angeles, California",
    "Chicago, Illinois",
    "Houston, Texas",
    "Phoenix, Arizona",
    "Philadelphia, Pennsylvania",
    "San Antonio, Texas",
    "San Diego, California",
    "Dallas, Texas",
    "Austin, Texas",
    "San Francisco, California",
    "Seattle, Washington",
    "Boston, Massachusetts",
    "Washington, District of Columbia",
    "Miami, Florida",
    "Las Vegas, Nevada",
    "Atlanta, Georgia",
    "Denver, Colorado",
    "Orlando, Florida",
    "New Orleans, Louisiana",
    "Nashville, Tennessee",
    "Portland, Oregon",
    "Honolulu, Hawaii",
    "San Jose, California",
    "Jacksonville, Florida",
    "Fort Worth, Texas",
    "Columbus, Ohio",
    "Charlotte, North Carolina",
    "Indianapolis, Indiana",
    "Detroit, Michigan",
    "Memphis, Tennessee",
    "Baltimore, Maryland",
    "Milwaukee, Wisconsin",
    "Albuquerque, New Mexico",
    "Tucson, Arizona",
    "Sacramento, California",
    "Kansas City, Missouri",
    "Omaha, Nebraska",
    "Raleigh, North Carolina",
    "Minneapolis, Minnesota",
    "Tampa, Florida",
    "Newark, New Jersey",
    "Pittsburgh, Pennsylvania",
    "Cincinnati, Ohio",
    "St. Louis, Missouri",
    "Cleveland, Ohio",
    "Salt Lake City, Utah",
    "San Juan, Puerto Rico",
    "Richmond, Virginia",
    "Boise, Idaho",
    "Charleston, South Carolina",
    "Savannah, Georgia",
    "Virginia Beach, Virginia",
    "Oakland, California",
    "Tulsa, Oklahoma",
    "Bakersfield, California",
    "Arlington, Texas",
    "Wichita, Kansas",
    "Aurora, Colorado",
    "Anaheim, California",
    "Santa Ana, California",
    "Riverside, California",
    "St. Paul, Minnesota",
    "Lexington, Kentucky",
    "Stockton, California",
    "Irvine, California",
    "Plano, Texas",
    "Jersey City, New Jersey",
    "Buffalo, New York",
    "Reno, Nevada",
    "Madison, Wisconsin",
    "St. Petersburg, Florida",
    "Norfolk, Virginia",
    "Scottsdale, Arizona",
    "Fort Wayne, Indiana",
    "Toledo, Ohio",
    "Greensboro, North Carolina",
    "Durham, North Carolina",
    "Anchorage, Alaska",
    "Little Rock, Arkansas",
    "Birmingham, Alabama",
    "Grand Rapids, Michigan",
    "Providence, Rhode Island",
    "Akron, Ohio",
    "Des Moines, Iowa",
    "Spokane, Washington",
    "Rochester, New York",
    "Tallahassee, Florida",
    "Syracuse, New York",
    "Knoxville, Tennessee",
    "Augusta, Georgia",
    "Columbia, South Carolina"
    "Tokyo, Japan",
    "Delhi, India",
    "Mumbai, India",
    "Dhaka, Bangladesh",
    "Karachi, Pakistan",
    "Kolkata, India",
    "Manila, Philippines",
    "Jakarta, Indonesia",
    "Lahore, Pakistan",
    "Bangkok, Thailand",
    "Seoul, South Korea",
    "Ho Chi Minh City, Vietnam",
    "Hyderabad, India",
    "Chennai, India",
    "Tehran, Iran",
    "Bengaluru, India",
    "Nagoya, Japan",
    "Kuala Lumpur, Malaysia",
    "Ahmedabad, India",
    "Singapore, Singapore",
    "Yangon, Myanmar",
    "Hanoi, Vietnam",
    "Baghdad, Iraq",
    "Riyadh, Saudi Arabia",
    "Hong Kong, Hong Kong SAR",
    "Surat, India",
    "Pune, India",
    "Fukuoka, Japan",
    "Taipei, Taiwan",
    "Chittagong, Bangladesh",
    "Jaipur, India",
    "Busan, South Korea",
    "Yokohama, Japan",
    "Dubai, United Arab Emirates",
    "Kyoto, Japan",
    "Surabaya, Indonesia",
    "Incheon, South Korea",
    "Jeddah, Saudi Arabia",
    "Osaka, Japan",
    "Bandung, Indonesia",
    "Medan, Indonesia",
    "Tashkent, Uzbekistan",
    "Phnom Penh, Cambodia",
    "Sapporo, Japan",
    "Daegu, South Korea",
    "Doha, Qatar",
    "Amman, Jordan",
    "Almaty, Kazakhstan",
    "Kuwait City, Kuwait",
    "Muscat, Oman",
    "Kathmandu, Nepal",
    "Beirut, Lebanon",
    "Islamabad, Pakistan",
    "Colombo, Sri Lanka",
    "Abu Dhabi, United Arab Emirates",
    "Baku, Azerbaijan",
    "Tbilisi, Georgia",
    "Yerevan, Armenia",
    "Thimphu, Bhutan",
    "Malé, Maldives",
    "Vientiane, Laos",
    "Brunei Town, Brunei",
    "Phuket, Thailand",
    "Goa, India",
    "Bali, Indonesia",
    "Siem Reap, Cambodia",
    "Penang, Malaysia",
    "Chiang Mai, Thailand",
    "Luang Prabang, Laos",
    "Toronto, Ontario",
    "Montreal, Quebec",
    "Vancouver, British Columbia",
    "Calgary, Alberta",
    "Edmonton, Alberta",
    "Ottawa, Ontario",
    "Quebec City, Quebec",
    "Winnipeg, Manitoba",
    "Hamilton, Ontario",
    "Halifax, Nova Scotia",
    "Victoria, British Columbia",
    "Saskatoon, Saskatchewan",
    "Regina, Saskatchewan",
    "St. John's, Newfoundland and Labrador",
    "Mississauga, Ontario",
    "Brampton, Ontario",
    "Surrey, British Columbia",
    "Laval, Quebec",
    "London, Ontario",
    "Markham, Ontario",
    "Vaughan, Ontario",
    "Gatineau, Quebec",
    "Kitchener, Ontario",
    "Longueuil, Quebec",
    "Burnaby, British Columbia",
    "Windsor, Ontario",
    "Oakville, Ontario",
    "Richmond, British Columbia",
    "Burlington, Ontario",
    "Oshawa, Ontario",
    "Sherbrooke, Quebec",
    "Greater Sudbury, Ontario",
    "Abbotsford, British Columbia",
    "Lévis, Quebec",
    "Coquitlam, British Columbia",
    "Barrie, Ontario",
    "Kelowna, British Columbia",
    "Guelph, Ontario",
    "Trois-Rivières, Quebec",
    "St. Catharines, Ontario",
    "Kingston, Ontario",
    "Thunder Bay, Ontario",
    "Moncton, New Brunswick",
    "Fredericton, New Brunswick",
    "Saint John, New Brunswick",
    "Charlottetown, Prince Edward Island",
    "Whitehorse, Yukon",
    "Yellowknife, Northwest Territories",
    "Niagara Falls, Ontario",
    "Whistler, British Columbia",
    "São Paulo, Brazil",
    "Buenos Aires, Argentina",
    "Rio de Janeiro, Brazil",
    "Lima, Peru",
    "Bogotá, Colombia",
    "Santiago, Chile",
    "Caracas, Venezuela",
    "Medellín, Colombia",
    "Guayaquil, Ecuador",
    "Quito, Ecuador",
    "Montevideo, Uruguay",
    "La Paz, Bolivia",
    "Asunción, Paraguay",
    "Salvador, Brazil",
    "Brasília, Brazil",
    "Fortaleza, Brazil",
    "Belo Horizonte, Brazil",
    "Manaus, Brazil",
    "Curitiba, Brazil",
    "Recife, Brazil",
    "Porto Alegre, Brazil",
    "Cali, Colombia",
    "Barranquilla, Colombia",
    "Cartagena, Colombia",
    "Maracaibo, Venezuela",
    "Arequipa, Peru",
    "Cusco, Peru",
    "Córdoba, Argentina",
    "Rosario, Argentina",
    "Mendoza, Argentina",
    "Valparaíso, Chile",
    "Santa Cruz de la Sierra, Bolivia",
    "Sydney, New South Wales",
    "Melbourne, Victoria",
    "Brisbane, Queensland",
    "Perth, Western Australia",
    "Adelaide, South Australia",
    "Gold Coast, Queensland",
    "Canberra, Australian Capital Territory",
    "Newcastle, New South Wales",
    "Wollongong, New South Wales",
    "Sunshine Coast, Queensland",
    "Hobart, Tasmania",
    "Geelong, Victoria",
    "Townsville, Queensland",
    "Cairns, Queensland",
    "Darwin, Northern Territory",
    "Toowoomba, Queensland",
    "Ballarat, Victoria",
    "Bendigo, Victoria",
    "Albury, New South Wales",
    "Launceston, Tasmania",
    "Mackay, Queensland",
    "Rockhampton, Queensland",
    "Bunbury, Western Australia",
    "Coffs Harbour, New South Wales",
    "Bundaberg, Queensland",
    "Wagga Wagga, New South Wales",
    "Hervey Bay, Queensland",
    "Shepparton, Victoria",
    "Port Macquarie, New South Wales",
    "Auckland, North Island",
    "Wellington, North Island",
    "Christchurch, South Island",
    "Hamilton, North Island",
    "Tauranga, North Island",
    "Dunedin, South Island",
    "Queenstown, South Island",
    "Rotorua, North Island",
    "Napier, North Island",
    "Nelson, South Island",
    "Palmerston North, North Island",
    "New Plymouth, North Island",
    "Invercargill, South Island",
    "Whangārei, North Island",
    "Gisborne, North Island",
    "Taupō, North Island",
    "Blenheim, South Island",
    "Timaru, South Island",
    "Whanganui, North Island",
    "Kaikōura, South Island",
    "Picton, South Island",
    "Wānaka, South Island",
    "Greymouth, South Island",
    "Masterton, North Island"

]

FILTERS = ["restaurants", "cafes", "bakery"]

# The URL of your running backend server
BACKEND_BASE_URL = "http://localhost:5007"

# --- SCRIPT LOGIC ---

def populate_data():
    """
    Loops through cities and filters, calling the backend API to populate the database.
    """
    print(f"Starting data population for {len(CITIES_TO_PREPOPULATE)} cities...")

    for city in CITIES_TO_PREPOPULATE:
        print(f"\n--- Processing city: {city} ---")
        
        # --- STEP 1: Get coordinates for the city ---
        coords = None
        try:
            print(f"  Step 1: Finding coordinates for '{city}'...")
            coords_url = f"{BACKEND_BASE_URL}/find-city-coordinates?city={requests.utils.quote(city)}"
            coords_response = requests.get(coords_url, timeout=30)

            if coords_response.status_code == 200:
                coords = coords_response.json()
                print(f"    SUCCESS: Found coordinates: {coords}")
            else:
                print(f"    ERROR: Could not find coordinates for '{city}'. Status: {coords_response.status_code}. Skipping this city.")
                # A pause even on failure
                time.sleep(5)
                continue # Go to the next city
        except requests.exceptions.RequestException as e:
            print(f"    CRITICAL ERROR: The request for coordinates failed for '{city}'. Error: {e}")
            # A pause even on failure
            time.sleep(5)
            continue # Go to the next city


        # --- STEP 2: Fetch places for each filter using the coordinates ---
        if coords:
            print(f"  Step 2: Fetching places for '{city}' using its coordinates...")
            for filter_type in FILTERS:
                # Construct the URL with the coordinates we just found
                request_url = f"{BACKEND_BASE_URL}/get-restaurants?lat={coords['lat']}&lon={coords['lng']}&type={filter_type}&city={requests.utils.quote(city)}"

                print(f"    Fetching {filter_type}...")
                try:
                    # Make the request with a long timeout, as the Gemini call can be slow
                    response = requests.get(request_url, timeout=120)

                    if response.status_code == 200:
                        print(f"      SUCCESS: Data for '{filter_type}' populated.")
                    else:
                        print(f"      ERROR: Failed to get data for '{filter_type}'. Status Code: {response.status_code}")
                        print(f"        Response: {response.text}")
                    
                    # Wait for a moment between individual filter requests
                    time.sleep(1)

                except requests.exceptions.RequestException as e:
                    print(f"      CRITICAL ERROR: The request for places failed for '{filter_type}'. Error: {e}")

        # A longer pause between each city to be respectful of API rate limits
        print(f"--- Finished processing {city}. Waiting before next city... ---")
        time.sleep(5)

    print("\nData population script finished!")


if __name__ == "__main__":
    populate_data()